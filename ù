% INPUT
% spawnedTetromino([...],[...])
% busyCell(
%          [...]
%          [...]
%          [...]
%           ...)


% OUTPUT
%

rows(0..20).
cols(0..10).
cell(R,C) :- rows(R), cols(C).

%tetromino([1, 1, 1, 1]).         % I
%tetromino([1, 1, 1], [0, 1, 0]). % T
%tetromino([1, 1, 1], [1, 0, 0]). % L
%tetromino([1, 1, 1], [0, 0, 1]). % J
%tetromino([1, 1], [1, 1]).       % Cube
%tetromino([1, 1, 0], [0, 1, 1]). % Z
%tetromino([0, 1, 1], [1, 1, 0]). % S
%spawnedTetromino([[1,1,1], [0,1,0]]).
%position(10,2).

%aiPosition(18,6) :- position(_,3).
%aiPosition(R,C) :- position(R,C), spawnedTetromino([[_,_,_], [_,_,_]]). %tetromino([_,_,_], [_,1,_]),
aiPosition(R1, C1, [[A,B,C], [D,E,F]]) :- position(R2,C2), spawnedTetromino([[A,B,C], [D,E,F]]), cell(R1,C1), C1<10-2, C1>0, R1<20-2, R1>0.
%aiPosition(T, R, C) :- cell(R,C), R<5, C<10-3, T=([[0, 1, 1], [1, 1, 0]]). % il '-3' l'ho messo perche' la forma piÃ¹ larga che ho lasicato e' 3
%:- aiPosition(R,C,T), busyCell(cell(R,C)).

%:- aiPosition(R,Y,[[A,B,C], [D,E,F]]), spawnedTetromino([[A,B,C], [D,E,F]]), busyCell(cell(A,B)), busyCell(cell(B,C)), busyCell(cell(D,E)), busyCell(cell(E,F)), busyCell(cell(R,Y)).
:- aiPosition(X,Y,[[A,B,C], [D,E,F]]), spawnedTetromino([[A,B,C], [D,E,F]]), busyCell(cell(X,Y)), A=1.
%:- aiPosition(X,Y,[[A,B,C], [D,E,F]]), spawnedTetromino([[A,B,C], [D,E,F]]), busyCell(cell(X+1,Y)), A=1.
%:- aiPosition(X,Y,[[A,B,C], [D,E,F]]), spawnedTetromino([[A,B,C], [D,E,F]]), busyCell(cell(X+1,Y+1)), A=1.
%:- aiPosition(X,Y,[[A,B,C], [D,E,F]]), spawnedTetromino([[A,B,C], [D,E,F]]), busyCell(cell(X+1,Y-1)), A=1.
%:- aiPosition(X,Y,[[A,B,C], [D,E,F]]), spawnedTetromino([[A,B,C], [D,E,F]]), busyCell(cell(X,Y+1)), A=1.
%:- aiPosition(X,Y,[[A,B,C], [D,E,F]]), spawnedTetromino([[A,B,C], [D,E,F]]), busyCell(cell(X,Y-1)), A=1.






%:~ aiPosition(R,C,T), aiPosition(R1,C,T), R<R1, R = #min{R2:aiPosition(R2,_)}. [R@1]
aiPosition(R1, C2, [[A,B,C], [D,E,F]]) :- spawnedTetromino([[A,B,C], [D,E,F]]), C2>0, C2<17, R1 = #max{R2:aiPosition(R2,_,[[_,_,_], [_,_,_]])}. %, C1=#max{C:aiPosition(_,C)}.



%freeCell(R,C) | notFreeCell(R,C) :- cell(R,C).
%:- freeCell(R,C), busyCell(cell(R,C)).
